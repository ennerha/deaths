# EM-DAT (2000-2025)
# ------------------------------------------------------------

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import matplotlib as mpl
from matplotlib.gridspec import GridSpec

# ----------------- OWID style settings -----------------
mpl.rcParams['font.family'] = 'sans-serif'
mpl.rcParams['font.sans-serif'] = ['Arial', 'DejaVu Sans', 'Helvetica']
mpl.rcParams['font.size'] = 20

# ----------------- Reading and processing -----------------
file_path = "/content/public_emdat_2025-09-29.xlsx"
sheet_name = "EM-DAT Data"

df = pd.read_excel(file_path, sheet_name=sheet_name)
df.columns = [c.strip() for c in df.columns]

def find_col(df, keywords):
    for c in df.columns:
        low = c.lower()
        if all(k.lower() in low for k in keywords):
            return c
    return None

year_col = find_col(df, ["year"]) or find_col(df, ["start", "year"])
disaster_group_col = find_col(df, ["disaster", "group"]) or find_col(df, ["group"])
disaster_type_col = find_col(df, ["disaster", "type"]) or find_col(df, ["type"])
total_deaths_col = None
for c in df.columns:
    if "total" in c.lower() and "death" in c.lower():
        total_deaths_col = c
        break

if not all([year_col, disaster_type_col, total_deaths_col]):
    raise RuntimeError(f"Columns not found: {df.columns.tolist()}")

df_proc = df[[year_col, disaster_group_col, disaster_type_col, total_deaths_col]].copy()
df_proc.columns = ["Year", "Disaster Group", "Disaster Type", "Total Deaths"]

df_proc["Year"] = pd.to_numeric(df_proc["Year"], errors="coerce").astype("Int64")
df_proc["Disaster Type"] = df_proc["Disaster Type"].astype(str).str.strip()
df_proc["Disaster Group"] = df_proc["Disaster Group"].astype(str).str.strip()
df_proc["Total Deaths"] = pd.to_numeric(df_proc["Total Deaths"], errors="coerce").fillna(0)

df_proc = df_proc[(df_proc["Year"] >= 2000) & (df_proc["Year"] <= 2025)]
df_proc = df_proc[df_proc["Disaster Group"].str.contains("Natural", case=False, na=False)].copy()

# ----------------- Type standardization -----------------
mapping = {
    'drought': 'Droughts',
    'flood': 'Floods',
    'riverine': 'Floods',
    'flash flood': 'Floods',
    'earthquake': 'Earthquakes',
    'volcanic activity': 'Volcanic activity',
    'volcano': 'Volcanic activity',
    'storm': 'Storms',
    'tropical cyclone': 'Storms',
    'tropical storm': 'Storms',
    'hurricane': 'Storms',
    'extreme temperature': 'Extreme temperature',
    'heat wave': 'Extreme temperature',
    'cold wave': 'Extreme temperature',
    'landslide': 'Landslides',
    'mudslide': 'Landslides',
    'wildfire': 'Wildfires',
    'forest fire': 'Wildfires',
}

def standardize_type(t):
    low = t.lower()
    for k, v in mapping.items():
        if k in low:
            return v
    return None

df_proc['DisType_std'] = df_proc['Disaster Type'].apply(standardize_type)
df_proc = df_proc.dropna(subset=['DisType_std'])

agg = df_proc.groupby(['Year', 'DisType_std'], as_index=False)['Total Deaths'].sum()
all_year = df_proc.groupby(['Year'], as_index=False)['Total Deaths'].sum()

# Order and colors as in OWID
disaster_config = [
    ('Droughts', '#5778a4'),
    ('Floods', '#6a9dc9'),
    ('Earthquakes', '#b07aa1'),
    ('Volcanic activity', '#e49444'),
    ('Storms', '#9270a5'),
    ('Extreme temperature', '#c93f48'),
    ('Landslides', '#7aa457'),
    ('Wildfires', '#d48d3b')
]

types_present = [t for t, _ in disaster_config if t in agg['DisType_std'].unique()]
color_map = {t: c for t, c in disaster_config}
type_to_y = {t: i for i, t in enumerate(reversed(types_present))}
agg['y'] = agg['DisType_std'].map(type_to_y)

def human_format(num):
    num = int(num)
    if num >= 1e6:
        val = num/1e6
        return f"{val:.1f}M" if val < 10 else f"{val:.0f}M"
    if num >= 1e3:
        return f"{num/1e3:.0f}k"
    return f"{num:,}"

max_death = max(all_year['Total Deaths'].max(), agg['Total Deaths'].max(), 1)

# MUCH IMPROVED SIZE FUNCTION - more visible and representative bubbles
def bubble_size(deaths, scale_factor=8000):
    """
    Uses optimized logarithmic scale for maximum visibility
    dramatically increased scale_factor
    """
    # Avoid log(0)
    deaths_safe = np.maximum(deaths, 1)
    
    # Logarithmic scale with smoother progression
    normalized = np.log10(deaths_safe + 1) / np.log10(max_death + 1)
    
    # Much larger minimum size to ensure visibility
    min_size = 150
    
    # Reduced exponent for better differentiation
    return min_size + (normalized ** 0.5) * scale_factor

# ----------------- Figure construction (larger) -----------------
fig = plt.figure(figsize=(22, 14), facecolor='#f0f0f0')
gs = GridSpec(nrows=2, ncols=1, height_ratios=[1.5, 8], hspace=0.12,
              top=0.94, bottom=0.06, left=0.09, right=0.97)

# --------------- Top panel: All disasters ---------------
ax_top = fig.add_subplot(gs[0, 0])
ax_top.set_facecolor('#f0f0f0')
ax_top.get_yaxis().set_visible(False)

x_all = all_year['Year'].values
y_all = np.zeros_like(x_all) + 0.5
sizes_all = bubble_size(all_year['Total Deaths'].values, scale_factor=12000)
ax_top.scatter(x_all, y_all, s=sizes_all, color='#932432',
               edgecolors='white', linewidth=2.5, alpha=0.95, zorder=3)

# Main annotations - top 5 events
top_years = all_year.sort_values('Total Deaths', ascending=False).head(5)
for idx, row in top_years.iterrows():
    yr = int(row['Year'])
    val = row['Total Deaths']
    lab = human_format(val)
    
    # Adaptive vertical position
    offset_y = 55 if val > max_death * 0.3 else 45
    
    ax_top.annotate(lab, xy=(yr, 0.5), xytext=(0, offset_y),
                    textcoords='offset points', ha='center', va='bottom',
                    fontsize=18, fontweight='bold', color='#1a1a1a',
                    bbox=dict(boxstyle='round,pad=0.4',
                             facecolor='white',
                             edgecolor='none',
                             alpha=0.9))

ax_top.set_xlim(1998, 2027)
ax_top.set_ylim(0, 1)
for spine in ax_top.spines.values():
    spine.set_visible(False)
ax_top.set_xticks([])

# "All disasters" text on the left
ax_top.text(-0.012, 0.5, 'All disasters', transform=ax_top.transAxes,
            fontsize=22, fontweight='bold', va='center', ha='right')

# --------------- Bottom panel: types by row ---------------
ax = fig.add_subplot(gs[1, 0])
ax.set_facecolor('#f0f0f0')

# Dotted reference lines
for t, y in type_to_y.items():
    ax.hlines(y, 2000, 2025, linestyles=':', linewidth=1.5,
              color='#aaaaaa', alpha=0.5, zorder=1)

# Bubbles by type - SIGNIFICANTLY INCREASED SIZE
for t in types_present:
    sub = agg[agg['DisType_std'] == t]
    if sub.empty:
        continue
    xs = sub['Year'].values
    ys = sub['y'].values
    ss = bubble_size(sub['Total Deaths'].values, scale_factor=8000)
    ax.scatter(xs, ys, s=ss, color=color_map[t],
               edgecolors='white', linewidth=2, alpha=0.95, zorder=2)

# Type labels on the left
yticks = list(type_to_y.values())
ylabels = list(type_to_y.keys())
ax.set_yticks(yticks)
ax.set_yticklabels(ylabels, fontsize=20, fontweight='bold')
ax.set_ylim(-0.8, max(yticks) + 0.8)
ax.set_xlim(1998, 2027)
ax.invert_yaxis()

# X axis
ax.set_xlabel("Year", fontsize=22, fontweight='bold', labelpad=10)
ax.set_xticks(np.arange(2000, 2026, 5))
ax.set_xticklabels([str(x) for x in np.arange(2000, 2026, 5)],
                    fontsize=20)

# Main event annotations - more selective
for t in types_present:
    sub = agg[agg['DisType_std'] == t].copy()
    if sub.empty:
        continue

    # Top 2 most significant events in each category
    threshold = max(sub['Total Deaths'].max() * 0.4, max_death * 0.02)
    topn = sub[sub['Total Deaths'] >= threshold].sort_values('Total Deaths', ascending=False).head(2)

    for idx, r in topn.iterrows():
        x = int(r['Year'])
        y = r['y']
        val = int(r['Total Deaths'])
        
        lab = human_format(val)

        # Adaptive positioning
        if x < 2012:
            offset_x, ha = (25, 'left')
        else:
            offset_x, ha = (-25, 'right')

        # Vertical offset by category
        offset_y_map = {
            'Droughts': -30,
            'Floods': 25,
            'Earthquakes': -30,
            'Volcanic activity': 20,
            'Storms': -30,
            'Extreme temperature': 25,
            'Landslides': 20,
            'Wildfires': 20
        }
        offset_y = offset_y_map.get(t, 20)

        ax.annotate(lab, xy=(x, y), xytext=(offset_x, offset_y),
                    textcoords='offset points', fontsize=14,
                    color='#1a1a1a', ha=ha, va='center',
                    fontweight='bold',
                    bbox=dict(boxstyle='round,pad=0.4',
                             facecolor='white',
                             edgecolor='none',
                             alpha=0.9),
                    arrowprops=dict(arrowstyle='-',
                                   color='#666666',
                                   lw=1.2,
                                   alpha=0.7))

# Note for wildfires
if 'Wildfires' in types_present:
    wildfire_y = type_to_y['Wildfires']
    ax.text(2012, wildfire_y,
            'Wildfires cause significant damage, but death tolls are typically low.',
            fontsize=17, style='italic', color='#ffffff', va='center', ha='center')

# Spine styling
for spine in ['top', 'right', 'left']:
    ax.spines[spine].set_visible(False)
ax.spines['bottom'].set_linewidth(2)
ax.spines['bottom'].set_color('#333333')
ax.tick_params(axis='y', which='both', length=0)
ax.tick_params(axis='x', which='both', length=6, width=2, color='#333333')

# ----------------- Saving -----------------
plt.savefig("emdat_owid_improved.png", dpi=300, bbox_inches='tight',
            facecolor='#f0f0f0', edgecolor='none')
plt.savefig("emdat_owid_improved.svg", bbox_inches='tight',
            facecolor='#f0f0f0', edgecolor='none')

print("✓ Improved chart saved!")
print(f"  • Maximum deaths: {human_format(max_death)}")
print(f"  • Types present: {len(types_present)}")
print(f"  • Years: {all_year['Year'].min()}-{all_year['Year'].max()}")
plt.show()
